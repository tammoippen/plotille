# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function, unicode_literals

# The MIT License

# Copyright (c) 2017 - 2021 Tammo Ippen, tammo.ippen@posteo.de

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import pandas as pd
import pandas_datareader as web
import datetime

import requests_cache

import plotille


expire_after = datetime.timedelta(days=39)
session = requests_cache.CachedSession(cache_name='cache', backend='sqlite', expire_after=expire_after)

# select start date for correlation window as well as list of tickers
start = datetime.datetime(2020, 1, 1)
end = datetime.datetime(2020, 3, 4)

symbols_list = ['SPY', 'AAPL']

# array to store prices
symbols = []

# pull price using iex for each symbol in list defined above
for ticker in symbols_list:
    r = web.DataReader(ticker, 'yahoo', start, end, session=session)
    # add a symbol column
    r['Symbol'] = ticker
    symbols.append(r)

# concatenate into df
df = pd.concat(symbols)
df = df.reset_index()
df = df[['Date', 'Close', 'Symbol']]
print(df.head())

df_pivot = df.pivot('Date', 'Symbol', 'Close').reset_index()
stock_table = df_pivot


def short_date(val, chars, delta, left=False):
    res = val.strftime("%x")
    return res


fig = plotille.Figure()
fig.width = 60
fig.height = 30
fig.register_label_formatter(pd._libs.tslibs.timestamps.Timestamp, short_date)

for symbol in stock_table.columns:

    if(symbol != "Date"):

        fig.plot(stock_table['Date'], stock_table[symbol], label=symbol)

print(fig.show(legend=True))
